#!/usr/bin/env node

/**
 * Module dependencies.
 */

const env = process.env.NODE_ENV || 'development';
if (env === 'development') {
  const path = require('path');
  const pathConfig = path.resolve(__dirname, '../config/.env.dev');
  require('dotenv').config({path: pathConfig});
}

//========ORM========
const models = require('../models');
//================

const app = require('../app');
const debug = require('debug')('serversms:server');

const socketIO = require('socket.io');
const http = require('http');

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

// Подключение сокета
const io = socketIO(server);
const users = require('../io/users')();
const logs = require('../io/logs')();
const colors = {
  red: 'red',
  green: 'green'
};

const message = (name, text, room, isMobile, isAutoMobile, color) => {
  const mes = {name, text, date: new Date(), room, isMobile, isAutoMobile, color};
  logs.add(mes.name, mes.text, mes.date, room, isMobile, isAutoMobile, color);
  return mes;
};

// Connecting sockets to the server and adding them to hthe request
// so that we can access them later in the controller
app.set('io', io);

io.on('connection', (socket) => {
  console.log(`IO connection id=${socket.id}`);

  socket.on('join', (user, cb) => {
    if (!user.displayName) {
      return cb('Enter valid user data');
    }
    cb({logs: logs.getLast10(user.room)});
    // Подлкючаем клиента в комнату
    socket.join(user.room);

    users.remove(socket.id);
    users.add(socket.id, user.displayName, user.room, user.isMobile, user.isAutoMobile);
    // socket.emit('message:new', message('Robot', `Logging ${userName}`));
    // Отпарвка всем подключенным клиентам, кроме меня в одной комнате
    // socket.broadcast.to(user.room).emit('message:new', message('Robot', `Подключился ${user.displayName}`, user.room, user.isMobile, user.isAutoMobile, colors.green));
    io.to(user.room).emit('message:new', message('Robot', `Подключился ${user.displayName}`, user.room, user.isMobile, user.isAutoMobile, colors.green));
  });

  socket.on('message:create', (data, cb) => {
    if (!data) {
      cb(`Message can't be empty`)
    } else {
      const user = users.get(socket.id);
      if (user) {
        // Оправка всем подключенным клиентам в одной комнате
        io.to(user.room).emit('message:new', message(user.displayName, data.text, user.room, user.isMobile, user.isAutoMobile));
      }
      cb();
    }
  });

  socket.on('message:statistic', (text) => {
    const user = users.get(socket.id);
    if (user) {
      // Оправка всем подключенным клиентам в одной комнате
      io.to(user.room).emit('message:new', message(user.displayName, text, user.room, user.isMobile, user.isAutoMobile));
    }
  });

  socket.on('disconnect', () => {
    const user = users.remove(socket.id);
    if (user) {
      io.to(user.room).emit('message:new', message('Robot', `Отключился ${user.displayName}`, user.room, user.isMobile, user.isAutoMobile, colors.red));
    }
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

//Синхронизировать модель с базой данных. Создание недостающихся таблиц в базу
// models.sequelize.sync()
//   .then(() => {
//     debug('Таблицы базы данных созданы');
//   })
//   .catch(error => console.log(error));

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
